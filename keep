#!/usr/bin/env python3
import sys
import os
import argparse
import getpass
import json
import logging
import yaml
import keyring
import gkeepapi
from keep_cli import commands

logger = logging.getLogger('keep-cli')
logger.setLevel(logging.INFO)
ch = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('[%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

def path_type(path: str):
    return os.path.expanduser(path)

parser = argparse.ArgumentParser('Keep-CLI')
parser.add_argument('--config-dir', type=path_type, default='~/.keep', help='Configuration directory')
parser.add_argument('--offline', action='store_true', help='Offline mode')
subparsers = parser.add_subparsers(help='Command', dest='command')

tui_parser = subparsers.add_parser('tui', help='TUI interface')
tui_parser.add_argument('--note', help='Note id')
tui_parser.set_defaults(func=commands.tui)

find_parser = subparsers.add_parser('find', help='Find all matching notes', parents=[parent_sync_parser])
find_parser.add_argument('--query', type=str, help='Regular expression match on title & text')
find_parser.add_argument('--colors', type=str, nargs='*', help='List of colors to match. Comma separated')
find_parser.add_argument('--labels', type=str, nargs='*', help='List of labels to match. Comma separated')
find_parser.add_argument('--pinned', type=bool, help='Pinned status to match')
find_parser.add_argument('--archived', type=bool, help='Archived status to match')
find_parser.add_argument('--trashed', type=bool, help='Trashed status to match')
find_parser.set_defaults(func=commands.find)

sync_parser = subparsers.add_parser('sync', help='Sync local state')
sync_parser.set_defaults(func=commands.sync)

parent_note_parser = argparse.ArgumentParser(add_help=False)
parent_note_parser.add_argument('--note', help='Note id', required=True)

parent_sync_parser = argparse.ArgumentParser(add_help=False)
parent_sync_parser.add_argument('--sync', help='Sync down notes', required=True)

get_parser = subparsers.add_parser('get', help='Get data on a note', parents=[parent_note_parser, parent_sync_parser])
get_parser.add_argument('--title', action='store_true', help='Display title of a note')
get_parser.add_argument('--text', action='store_true', help='Display body of a note')
get_parser.add_argument('--checked', action='store_true', help='Display list checked items on a list')
get_parser.add_argument('--unchecked', action='store_true', help='Display unchecked items on a list')
get_parser.add_argument('--labels', action='store_true', help='Display labels on a note')
get_parser.set_defaults(func=commands.get)

set_parser = subparsers.add_parser('set', help='Set data on a note', parents=[parent_note_parser, parent_sync_parser])
set_parser.set_defaults(func=commands.set)

args = parser.parse_args()

if not os.path.isdir(args.config_dir):
    os.makedirs(args.config_dir)

config_file = os.path.join(args.config_dir, 'config.yml')
config = {}
if os.path.isfile(config_file):
    with open(config_file, 'r') as fh:
        config = yaml.load(fh, Loader=yaml.Loader)
else:
    config = {
        'username': input('Username: '),
        'views': {
            'default': {
                'name': 'Default',
                'type': 'grid',
            },
        },
    }
    with open(config_file, 'w') as fh:
        yaml.dump(config, fh, default_flow_style=False)

keep = gkeepapi.Keep()

logged_in = args.offline

token = keyring.get_password('google-keep-token', config['username'])
if not logged_in and token:
    logger.info('Authenticating with token')

    username = config.get('username', 'user')
    cache_file = os.path.join(args.config_dir, '%s.json' % username)
    state = None

    try:
        fh = open(cache_file, 'r')

        try:
            state = json.load(fh)
        except json.decoder.JSONDecodeError:
            logging.warning('Unable to load state file: %s', cache_file)
        fh.close()
    except FileNotFoundError:
        logging.warning('Unable to find state file: %s', cache_file)

    try:
        keep.resume(config['username'], token, state=state, sync=False)
        logged_in = True
        logger.info('Success')
    except gkeepapi.exception.LoginException:
        logger.info('Invalid token')

if not logged_in:
    password = getpass.getpass()
    try:
        keep.login(config['username'], password, sync=False)
        logged_in = True
        del password
        token = keep.getMasterToken()
        keyring.set_password('google-keep-token', config['username'], token)
        logger.info('Success')
    except gkeepapi.exception.LoginException:
        logger.info('Login failed')

if not logged_in:
    logger.error('Failed to authenticate')
    sys.exit(1)


args.func(args, keep, config)
