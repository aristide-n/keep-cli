#!/usr/bin/env python3
import sys
import os
import argparse
import application
import yaml
import keyring
import getpass
import gkeepapi
import urwid
import constants
import logging
from uuid import getnode as get_mac

logger = logging.getLogger('keep-cli')
logger.setLevel(logging.INFO)
ch = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('[%(levelname)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

parser = argparse.ArgumentParser('Keep-CLI')
parser.add_argument('--config-dir', type=str, default='~/.keep', help='Configuration directory')
parser.add_argument('--offline', action='store_true', help='Offline mode')

args = parser.parse_args()

config_dir = os.path.expanduser(args.config_dir)
if not os.path.isdir(config_dir):
    os.makedirs(config_dir)

config_file = os.path.join(config_dir, 'config.yml')
fh = open(config_file, 'r')
config = yaml.load(fh, Loader=yaml.Loader)
fh.close()

keep = gkeepapi.Keep()

logged_in = args.offline

token = keyring.get_password('google-keep-token', config['username'])
if not logged_in and token:
    logger.info('Authenticating with token')
    auth = gkeepapi.APIAuth(gkeepapi.Keep.OAUTH_SCOPES)
    auth._email = config['username']
    auth._android_id = get_mac()
    auth.setMasterToken(token)
    auth.refresh()
    try:
        keep.load(auth, sync=False)
        logged_in = True
        logger.info('Success')
    except gkeepapi.exception.LoginException:
        logger.info('Invalid token')

if not logged_in:
    password = getpass.getpass()
    try:
        keep.login(config['username'], password)
        logged_in = True
        del password
        token = keep._keep_api._auth.getMasterToken()
        keyring.set_password('google-keep-token', config['username'], token)
        logger.info('Success')
    except gkeepapi.exception.LoginException:
        logger.info('Login failed')

if not logged_in:
    print('[+] Failed to authenticate')
    sys.exit(1)

app = application.Application(keep, config, config_dir, args.offline)
loop = urwid.MainLoop(app, constants.Palette)
loop.screen.set_terminal_properties(colors=256)
try:
    loop.run()
except KeyboardInterrupt:
    pass
